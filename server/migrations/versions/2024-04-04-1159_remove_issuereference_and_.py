"""Remove IssueReference and IssueDependency

Revision ID: 2789c0edcdf9
Revises: 28c63f49ab81
Create Date: 2024-04-04 11:59:20.530144

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# Polar Custom Imports
from polar.kit.extensions.sqlalchemy import PostgresUUID

# revision identifiers, used by Alembic.
revision = "2789c0edcdf9"
down_revision = "28c63f49ab81"
branch_labels: tuple[str] | None = None
depends_on: tuple[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_issue_references_issue_id", table_name="issue_references")
    op.drop_table("issue_references")
    op.drop_table("issue_dependencies")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "issue_dependencies",
        sa.Column("dependent_issue_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "dependency_issue_id", sa.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("organization_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("repository_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["dependency_issue_id"],
            ["issues.id"],
            name="issue_dependencies_dependency_issue_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["dependent_issue_id"],
            ["issues.id"],
            name="issue_dependencies_dependent_issue_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organizations.id"],
            name="issue_dependencies_organization_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["repository_id"],
            ["repositories.id"],
            name="issue_dependencies_repository_id_fkey",
        ),
        sa.PrimaryKeyConstraint(
            "dependent_issue_id", "dependency_issue_id", name="issue_dependencies_pkey"
        ),
    )
    op.create_table(
        "issue_references",
        sa.Column("issue_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("pull_request_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("reference_type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("external_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "external_source",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["issue_id"], ["issues.id"], name="issue_references_issue_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["pull_request_id"],
            ["pull_requests.id"],
            name="issue_references_pull_request_id_fkey",
        ),
        sa.PrimaryKeyConstraint(
            "issue_id", "reference_type", "external_id", name="issue_references_pkey"
        ),
    )
    op.create_index(
        "ix_issue_references_issue_id", "issue_references", ["issue_id"], unique=False
    )
    # ### end Alembic commands ###
